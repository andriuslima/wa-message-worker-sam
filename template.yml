AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Serverless application to process phones and send whatsapp messages

Parameters:
  ZAPIURL:
    Type: String
    Description: ZApi host
    Default: https://api.z-api.io
  ZAPIINSTANCE:
    Type: String
    Description: ZApi instance id
    Default: 123
  ZAPITOKEN:
    Type: String
    Description: ZApi Token
    Default: 123abc
  TABLENAME:
    Type: String
    Description: DynamoDB table name that contains the messages
    Default: MessageValuesTable

Globals:
  Function:
    Handler: index.handler
    Runtime: nodejs14.x
    MemorySize: 128
    Timeout: 10
    Layers:
      - !Ref CommLayer

Resources:
  WaMessageParserDLQ:
    Type: AWS::SQS::Queue
  WaMessageParserQueue:
    Type: AWS::SQS::Queue
    Properties:
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt WaMessageParserDLQ.Arn
        maxReceiveCount: 2
  WaMessageSenderDLQ:
    Type: AWS::SQS::Queue
  WaMessageSenderQueue:
    Type: AWS::SQS::Queue
    Properties:
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt WaMessageSenderDLQ.Arn
        maxReceiveCount: 2
  CommLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: comm-layer
      CompatibleRuntimes:
        - nodejs12.x
      Description: Common layer for WaSender and Webhooks
      ContentUri: ./layer
  ActiveCampaignWebhook:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: bin/active-campaign-webhook/
      Description: Endpoint to process whatsapp message events and send to queue
      Events:
        PostMessage:
          Type: Api
          Properties:
            Path: /message/{key}
            Method: POST
      Environment:
        Variables:
          QUEUE: !Ref WaMessageParserQueue
      Policies:
        - 'arn:aws:iam::aws:policy/CloudWatchLambdaInsightsExecutionRolePolicy'
        - Statement:
            - Sid: SQSQueuePolicy
              Effect: Allow
              Action:
                - SQS:SendMessage
              Resource:
                - !GetAtt WaMessageParserQueue.Arn
  WaParser:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: bin/parser/
      Description: Function to parser WhatsApp messages and send to sender funtion
      Events:
        messageQueueEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt WaMessageParserQueue.Arn
            BatchSize: 10
      Environment:
        Variables:
          DLQ: !Ref WaMessageParserDLQ
          SENDER_QUEUE: !Ref WaMessageSenderQueue
          TABLENAME: !Ref TABLENAME
          LOCAL_DB: false
      DeadLetterQueue:
        Type: SQS
        TargetArn: !GetAtt WaMessageParserDLQ.Arn
      Policies:
        - 'arn:aws:iam::aws:policy/CloudWatchLambdaInsightsExecutionRolePolicy'
        - Statement:
            - Sid: DynamoPolicy
              Effect: Allow
              Action:
                - dynamodb:PutItem
                - dynamodb:GetItem
                - dynamodb:Query
              Resource:
                - !Sub 'arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${TABLENAME}*'
        - Statement:
            - Sid: SSMGetParameterPolicy
              Effect: Allow
              Action:
                - ssm:GetParameter
              Resource: '*'
        - Statement:
            - Sid: SQSQueuePolicy
              Effect: Allow
              Action:
                - SQS:SendMessage
              Resource:
                - !GetAtt WaMessageParserDLQ.Arn
                - !GetAtt WaMessageSenderQueue.Arn
  WaSender:
    Type: AWS::Serverless::Function
    Properties:
      Timeout: 15
      CodeUri: bin/sender/
      Description: Function to send whatsapp message
      Events:
        messageQueueEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt WaMessageSenderQueue.Arn
            BatchSize: 10
      Environment:
        Variables:
          ZAPI_HOST: !Ref ZAPIURL
          ZAPI_INSTANCE: !Ref ZAPIINSTANCE
          ZAPI_TOKEN: !Ref ZAPITOKEN
          DLQ: !Ref WaMessageSenderDLQ
          QUEUE: !Ref WaMessageSenderQueue
      DeadLetterQueue:
        Type: SQS
        TargetArn: !GetAtt WaMessageSenderDLQ.Arn
      Policies:
        - 'arn:aws:iam::aws:policy/CloudWatchLambdaInsightsExecutionRolePolicy'
        - Statement:
            - Sid: SQSQueuePolicy
              Effect: Allow
              Action:
                - SQS:SendMessage
              Resource:
                - !GetAtt WaMessageSenderQueue.Arn
                - !GetAtt WaMessageSenderDLQ.Arn
  WaSenderRetry:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: bin/sender-retry/
      Description: Function to reprocees message from DLQ
      Events:
        CronSchedule:
          Type: Schedule
          Properties:
            Schedule: 'rate(23 hours)'
            Name: SenderRetrySchedule
            Enabled: True
        CronScheduleForTesting:
          Type: Schedule
          Properties:
            Schedule: 'rate(5 minutes)'
            Name: SenderRetryScheduleForTesting
            Enabled: False
      Environment:
        Variables:
          DLQ: !Ref WaMessageSenderDLQ
          QUEUE: !Ref WaMessageSenderQueue
      DeadLetterQueue:
        Type: SQS
        TargetArn: !GetAtt WaMessageSenderDLQ.Arn
      Policies:
        - 'arn:aws:iam::aws:policy/CloudWatchLambdaInsightsExecutionRolePolicy'
        - Statement:
            - Sid: SQSQueuePolicy
              Effect: Allow
              Action:
                - SQS:SendMessage
                - SQS:ReceiveMessage
                - SQS:DeleteMessage
                - SQS:GetQueueAttributes
              Resource:
                - !GetAtt WaMessageSenderDLQ.Arn
                - !GetAtt WaMessageSenderQueue.Arn
